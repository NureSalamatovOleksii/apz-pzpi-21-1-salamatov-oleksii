1 ОПИС АРХІТЕКТУРИ КЛІЄНТСЬКОЇ ЧАСТИНИ
     
Для написання клієнтської частини системи було обрано мову програмування JavaScript з використанням технології React, що дозволяє забезпечити високу швидкість розробки і зручність у використанні за рахунок можливостей бібліотеки, управління станами та компонентного підходу. 
Щоб реалізувати елементи інтерфейсу було використано бібліотеки react-bootstrap і reactstrap, які надають готові шаблони стилів для елементів інтерфейсу для швидкої і зручної розробки гарно оформленого, і відповідно, візуально привабливого веб-додатку.
Для реалізації відображення місцезнаходження точок збору було використано бібліотеку MapBox GL, яка забезпечує великі можливості географічної візуалізації та взаємодії з картографічними об’єктами для створення динамічних та інтерактивних карт.
Для реалізації локалізації інтерфейсу було використано бібліотеку i18next, яка дозволяє легко і ефективно забезпечити багатомовний інтерфейс та пропонує зручний механізм перекладу тексту.
Для виконання навігації по сайту використано бібліотеку react-router-dom, яка надає зручні та гнучкі інструменти для створення навігації та управління маршрутами веб-застосунку.
Для зручного вибору відтинку часу було використано пакет react-datepicker завдяки приємному інтерфейсу, який він забезпечує.
Для візуалізації використаних пакетів було розроблено діаграму пакетів (див. рис. 1).
Клієнтську частину було розроблено за допомогою Feature-Based File Structure архітектури. Вона організує код за функціональними областями та типами компонентів, що спрощує навігацію та підтримку коду, а кожен тип сутностей має власну папку.
Такий підхід забезпечує хорошу організованість і масштабованість React-додатка, дозволяючи легко додавати нові елементи, зберігаючи при цьому ясність і структуру коду. Файли і папки організовані таким чином: в корені проекту знаходяться папки public і src, де public містить статичні файли, такі як index.html. Папка src містить весь вихідний код додатка. Тут розташовані папки assets для статичних ресурсів (зображення, стилі), components для компонентів додатка, де спільні компоненти зберігаються в common, а специфічні в specific. Хуки зберігаються в папці hooks, контексти для управління глобальним станом - у папці contexts, а сервіси для роботи з API та бізнес-логікою - у папці services. Компоненти сторінок зберігаються в pages, маршрути додатка - в routes, а утиліти та допоміжні функції - в utils. Основні файли додатка, такі як App.js та index.js, розташовані безпосередньо в папці src.
Для кращого розуміння архітектури системи було розроблено діаграму компонентів (див. додат. Б.1).

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ
     
Користувачами клієнтської частини розробленої системи є 2 типи акторів: адміністратор та клієнт.
Основними потребами клієнта є в першу чергу можливість перегляду точок прийому сміття на мапі, їх стану, характеристики та заповненості, а також перегляд особистої інформації, її редагування, видалення акаунту за потреби, доступ до накопичених бонусів, переліку виконаних операції зі здачі сміття тощо.
Основними потребами адміністратора є: можливість перегляду користувачів системи та керування ними; можливість створення, редагування та видалення будь-яких даних у системі; можливість зручного перегляду всіх збережених даних, використання сортування; формування та завантаження звіту щодо роботи конкретної точки збору; можливість створення резервних копій даних системи та їхній імпорт в систему.
Взаємодію обох ролей користувачів з клієнтською частиною системи представлено на діаграмі прецедентів (див. додат. А.1).
Відповідно, за допомогою діаграми прецедентів було визначено функціональні потреби та взаємодію різних типів користувачів із системою.

3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ
 
Для написання клієнтської частини системи було обрано мову програмування JavaScript з використанням технології React, що дозволяє забезпечити високу швидкість розробки і зручність у використанні за рахунок можливостей бібліотеки, управління станами та компонентного підходу. 
Щоб реалізувати елементи інтерфейсу було використано бібліотеки react-bootstrap і reactstrap, які надають готові шаблони стилів для елементів інтерфейсу для швидкої і зручної розробки гарно оформленого, і відповідно, візуально привабливого веб-додатку.
Для реалізації відображення місцезнаходження точок збору було використано бібліотеку MapBox GL, яка забезпечує великі можливості географічної візуалізації та взаємодії з картографічними об’єктами для створення динамічних та інтерактивних карт.
Для реалізації локалізації інтерфейсу було використано бібліотеку i18next, яка дозволяє легко і ефективно забезпечити багатомовний інтерфейс та пропонує зручний механізм перекладу тексту.
Для виконання навігації по сайту використано бібліотеку react-router-dom, яка надає зручні та гнучкі інструменти для створення навігації та управління маршрутами веб-застосунку.
Для зручного вибору відтинку часу було використано пакет react-datepicker завдяки приємному інтерфейсу, який він забезпечує.
Для візуалізації використаних пакетів було розроблено діаграму пакетів (див. рис. 1).

4 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ
 
Клієнтську частину було розроблено за допомогою Feature-Based File Structure архітектури. Вона організує код за функціональними областями та типами компонентів, що спрощує навігацію та підтримку коду, а кожен тип сутностей має власну папку.
Такий підхід забезпечує хорошу організованість і масштабованість React-додатка, дозволяючи легко додавати нові елементи, зберігаючи при цьому ясність і структуру коду. Файли і папки організовані таким чином: в корені проекту знаходяться папки public і src, де public містить статичні файли, такі як index.html. Папка src містить весь вихідний код додатка. Тут розташовані папки assets для статичних ресурсів (зображення, стилі), components для компонентів додатка, де спільні компоненти зберігаються в common, а специфічні в specific. Хуки зберігаються в папці hooks, контексти для управління глобальним станом - у папці contexts, а сервіси для роботи з API та бізнес-логікою - у папці services. Компоненти сторінок зберігаються в pages, маршрути додатка - в routes, а утиліти та допоміжні функції - в utils. Основні файли додатка, такі як App.js та index.js, розташовані безпосередньо в папці src. 
Для кращого розуміння архітектури системи було розроблено діаграму компонентів (див. додат. Б.1).

5 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ

Користувач починає взаємодіяти з клієнтською частиною з введення даних профілю (під час реєстрації або входу). Після авторизації, відповідно до ролі  користувача, взаємодія поділяється на клієнтську та адміністраторську.
Якщо користувач є клієнтом, він може переглядати точки збору на мапі та інформацію про них, відстежувати їх стан у реальному часі. За допомогою інструментів пошуку може знайти для нього найбільш підходящий для нього варіант. У разі необхідності, клієнт може оновлювати власні дані, редагувати профіль або взагалі видалити акаунт. Крім того, клієнту доступні операції зі здачі сміття, у яких він брав участь.
Якщо користувач є адміністратором, він має доступ до панелі адміністратора, з якої він може імпортувати та експортувати дані системи, переглядати збережені дані, здійснювати керування ними, включаючи редагування, видалення, додавання нової інформації та управління користувачами, а також формувати звіти про роботу точок прийому за певний період. 
Для більш детального відображення взаємодії користувачів з клієнтської частиною системи було розроблено діаграму взаємодії (див. додат. В.1).

ВИСНОВКИ

Під час виконання лабораторної роботи були отримані навички з проєктування клієнтської частини програмної системи. Результатом роботи є розроблена програмна реалізація клієнтської частини програмної системи з використанням ReactJS. При розробці продукту дотримувались вимоги до чистого коду мови програмування JavaScript.
