1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Системи SmartRecycling представляє собою тришарову архітектуру. Вона складається з кількох взаємопов'язаних компонентів, що забезпечують роботу веб-клієнта, мобільного додатку, IoT пристрою та бази даних. Основу системи становить веб-сервер з API, реалізований за допомогою ASP.NET Core Web API. Цей сервер взаємодіє з MS SQL Server для зберігання і управління даними.
Веб-сервер обслуговує різні клієнтські додатки, включаючи браузерний вебсайт, реалізований на ReactJS, та мобільний додаток для Android. Крім того, сервер контролює роботу торговельних автоматів через прошивку IoT-пристроїв. Система також має комплексну внутрішню структуру, що включає бізнес-логіку, моделі даних і доступ до бази даних, розподілені між різними модулями, такими як SmartRecycling.API, SmartRecycling.Business, та SmartRecycling.DataAccess.
Таким чином, архітектура SmartRecycling забезпечує ефективну обробку запитів від різних типів клієнтів, управління бізнес-логікою та надійне зберігання даних, забезпечуючи повний цикл обробки інформації від користувача до бази даних.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

На рисунку 2 для кращої ілюстрації використаних технологій наведено діаграму розгортання, що описує архітектуру програми.
Система складається з 5 компонентів, а саме: веб серверу з API, веб-додатку, бази даних, мобільного застосунку та IoT-приладу. На сервері розміщується backend програмного продукту який містить більшу частину бізнес-логіки. Веб-додаток дозволяє користувачам взаємодіяти із системою та робити замовлення. Мобільний застосунок, що працює на Android, дозволяє користувачам реєструвати нові IoT прилади у системі. IoT прилад відправляє статистичні дані та видає замовлення.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Для створення програмного забезпечення було обрано наступні інструменти розробки:
−	Серверна частина написана на мові C# з використанням технології .NET ASP.NET Core Web API з використанням стилю REST;
−	База даних створена за допомогою технології MS SQL Server по принципу Code First, доступ до неї здійснюється з використанням технології Entity Framework Core.
Щоб переглядати та перевіряти ендпоінти API використовується Swagger, який дозволяє зручно проводити тестування API, покращуючи якість та зручність розробки. Для забезпечення безпеки даних та конфіденційності використовується захищений протокол HTTPS, що допомагає захистити дані під час їхньої передачі. 
Для автоматизації процесу мапування між об’єктами використано бібліотеку AutoMapper. Це дозволяє зменшити кількість одноманітного коду при роботі з об’єктами даних та спрощує розробку серверної частини. 
Для забезпечення маршрутизації запитів використанні API контролери, що є вбудованими засобами розробки на ASP .NET Core. Вони дозволяють розділити програму на логічні компоненти, кожен з яких відповідає за обробку конкретного виду запитів або дій користувача. Це спрощує керування кодом та його розширення. 
Розроблений серверний застосунок побудований відповідає принципам Чистої Архітектури та складається з BLL, DLL, CORE та Domain частин, які взаємодіють між собою. 
Діаграма компонентів серверного застосунка представлена на діаграмі пакетів (див. додат. Б.1). 
Приклади частин коду серверного застосунка представлено у додатку Г.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Перед початком розробки сервера треба проаналізувати концептуальне моделювання предметної області. За допомогою програмного забезпечення клієнти повинні мати доступ до збереження, редагування власної інформації, перегляду її, а також статистики та бонусів щодо за їх внесок у переробку сміття. І звичайно перш за все, вони можуть здавати сміття в пунктах здачі у найбільш зручний спосіб і при цьому можливо переглянути найближчі до користувача точки прийому, включно за допомогою функцій пошуку та фільтрування.
Адміністратор же відповідає за підтримку працездатності програмної системи та редагування системних даних. Він має доступ до унікального функціоналу, до якого не мають інші користувачі, зокрема, у його розпорядженні є коригування логістичних та бізнес процесів, формувати звіти роботи підприємств, змінювати статус операцій тощо. Здатний переглядати усіх  користувачів, що зареєстровані у системі, пошук та сортування. Адміністратор може видалити користувача. Можливий перегляд інформації про всі проведені операції та їх редагування, має доступ до інших даних, що занесені до системи.
За допомогою діаграми прецедентів було визначено функціональні потреби та взаємодію різних користувачів із системою (див. додат. А.1). 

5 ПОБУДОВА ER-ДІАГРАМИ

Для проєктування бази даних було розроблено ER діаграму (див. рис. 2.1). Вона складається з 8 таблиць, а саме: користувачі, їх статистика, операції, точки збору, зміст точок збору, транспортування, точки переробки і статистика до них тощо.
Розглянемо зв’язки між ними детальніше. Користувачі та їх статистика мають відношення один до одного, оскільки кожному користувачу відповідає один екземпляр статистики на нього. Користувачі та операції мають зв’язок один до багатьох, так як у одного користувача може проводити безліч операцій. Точки збору та операції мають зв’язок один до багатьох, тому що пункт збору може брати участь у безлічі операцій. Таким же чином, із точок прийому сміття може забиратися безліч разів, відповідно вони і операції транспортування мають відношення один до багатьох. Самі ж точки збору та їх зміст мають зв’язок один до одного, бо на одній точці відповідає власний зміст. У пунктів переробки та транспортування встановлено зв’язок один до багатьох, оскільки перші можуть безліч разів брати участь у операціях транспортування. І наостанок, точки переробки і їхня статистика мають відношення один до багатьох, бо одна точка може мати багато звітів.

6 СПЕЦИФІКАЦІЯ REST

REST API в даному проекті складається із 24 ендпоінтів. Кожний ендпоінт відповідає за надання даних клієнту та виконання певної бізнес логіки.
Для полегшення взаємодії з API було створено її специфікацію, що наведено у таблиці 1.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Діаграма компонентів зображує архітектуру програмної системи SmartRecycling. Вона складається з наступних складових та їх взаємодій:
Старт програми починаеється з файлу Program.cs, який відповідає за конфігурацію, запуск і реєстрацію залежностей. Він взаємодіє з компонентом SmartRecycling.API, який включає кілька контролерів: AuthController.cs, UserController.cs, CollectionPointController.cs, RecyclingPointController.cs та OperationController.cs. Ці контролери обробляють запити від веб-клієнта (зображеного у лівому нижньому куті) та відповідають на них через HTTPS-запити та відповіді.
Компонент SmartRecycling.API.Models обробляє запити на отримання та оновлення версій моделей домену, які потім передаються до SmartRecycling.API. Ці моделі включають CollectionPointModel.cs, RecyclingPointModel.cs, UserModel.cs, TransportationModel.cs, OperationModel.cs, CollectionPointCompositionModel.cs, UserStatisticsModel.cs та CollectionPointStatisticsModel.cs.
Компонент SmartRecycling.Business відповідає за бізнес-логіку системи та містить сервіси: AuthenticationService.cs, StatisticService.cs, TransportationService.cs та PointStateService.cs. Ці сервіси взаємодіють з SmartRecycling.API через моделі мапування.
Компонент SmartRecycling.DataAccess обробляє доступ до даних і включає SmartRecyclingDbContext, DB Migrations та BackupManager.cs. Він взаємодіє з SmartRecycling.Business, забезпечуючи зберігання та резервне копіювання даних.
Всі ці компоненти пов'язані між собою і забезпечують взаємодію веб-клієнта з базою даних через API та бізнес-логіку, забезпечуючи повний цикл обробки запитів і управління даними в системі SmartRecycling.

ВИСНОВКИ

Під час лабораторної роботи було розроблено документацію щодо архітектури та компоненти сервера, бази даних. Розроблено серверну частину для програмної системи зручного донорства крові. Працездатність перевірено за допомогою тестів. Протягом розробки продукти було дотримано вимоги до чистого коду мови програмування C#.

ДОДАТОК А
Специфікація REST
Таблиця 1 – Специфікація REST
Кінцева точка	Ролі доступу	Метод	Призначення
/api/Auth/token	Звичайний користувач	POST	Створення JWT-токену
/api/Auth/{id}/{code}	Звичайний користувач	POST	Підтвердити код активації
/api/CollectionPoint/GetCollectionPoints	Клієнт, Адмін	GET	Отримання даних про точки прийому
/api/CollectionPoint/GetCollectionPoint/
{id}	Клієнт, Адімн	GET	Отримання даних про конкретну точку прийому
/api/CollectionPoint/
CreateCollectionPoint	Адмін	POST	Створення точки прийому
/api/CollectionPoint/
UpdateCollectionPointPartially/{id}	Адмін	PATCH	Часткове оновлення точки збору
/api/Operation/CreateOperation	Адмін	POST	Створення операції
Продовження табл. 1
Кінцева точка	Ролі доступу	Метод	Призначення
/api/RecyclingPoint/GetRecyclingPoints	Адімн	GET	Отримання всіх точок переробки
/api/RecyclingPoint/GetRecyclingPoint/ {id}	Адмін	GET	Отримання конкретної точки переробки
/api/RecyclingPoint/CreateRecyclingPoint	Адмін	POST	Створення точки переробки
/api/CollectionPoint/CreateReport	Адмін	POST	Створення та отримання звіту
/api/CollectionPoint/GetReport/{id}	Адмін	GET	Отримання збереженого звіту
/api/Transportation/Get	Адмін	GET	Отримання операції транспортування
/api/Transportation/CreateTransportation	Адмін	POST	Створення транспортування
/api/Transportation/UpdateTransportation	Адмін	PUT	Оновлення транспортування
/api/User/GetUser/{id}	Клієнт, Адмін	GET	Отримання даних про користувача
/api/User/GenerateQRCode/{userId}	Клієнт	GET	Отримання QR-коду юзера
/api/User/CreateUser	Звичайний користувач	POST	Створення користувача
Кінець табл .1
Кінцева точка	Ролі доступу	Метод	Призначення
/api/User/UpdateUser	Клієнт	PUT	Оновлення користувача
/api/User/DeleteUser/{id}	Клієнт, Адмін	DELETE	Видалення користувача
/api/UserStatistics/CreateUserStatistics	Клієнт	POST	Створення статистики користувача
/api/Data/ExportDatabase	Адмін	GET	Отримати резервну копію бази даних
/api/Data/UploadBackup	Адмін	POST	Застосувати резервну копію
